{"version":3,"file":"component---src-pages-coreconcepts-meters-overview-mdx-69385c11ae2878518bf0.js","mappings":"uIAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBT,EAAMU,aAAa,gBAACC,EAAe,mBAAEC,GAAsBX,EAGpF,OAFKW,GAAoBC,EAAqB,sBAAsB,GAC/DF,GAAiBE,EAAqB,mBAAmB,GACvDC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBH,EAAiB,KAAMG,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,+GAAgHU,EAAAA,cAAoBb,EAAYI,IAAK,KAAM,qGAAsG,KAAMS,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,YAAa,KAAMQ,EAAAA,cAAoBF,EAAoB,CAC/eG,KAAM,WACLD,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,2EAA4EU,EAAAA,cAAoBb,EAAYI,IAAK,KAAM,sGAAuG,KAAMS,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,6LAA8L,KAAMU,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,8PAA+P,KAAMU,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,yIAA0I,KAAMU,EAAAA,cAAoBb,EAAYM,GAAI,KAAM,KAAMO,EAAAA,cAAoBb,EAAYO,GAAI,KAAM,iGAAkG,KAAMM,EAAAA,cAAoBb,EAAYO,GAAI,KAAM,qKAAsK,MAAO,KAAMM,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,qPAAsP,KAAMU,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,wDAAyD,KAAMU,EAAAA,cAAoBb,EAAYM,GAAI,KAAM,KAAMO,EAAAA,cAAoBb,EAAYO,GAAI,KAAM,+FAAgG,KAAMM,EAAAA,cAAoBb,EAAYO,GAAI,KAAM,iQAAkQ,MAAO,KAAMM,EAAAA,cAAoBF,EAAoB,CAC/yEG,KAAM,SACLD,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,6FAA8FU,EAAAA,cAAoBb,EAAYI,IAAK,KAAM,kFAAmFS,EAAAA,cAAoBb,EAAYI,IAAK,KAAM,2IAA4I,KAAMS,EAAAA,cAAoBF,EAAoB,CAC3eG,KAAM,SACLD,EAAAA,cAAoBb,EAAYG,EAAG,KAAM,sJAAuJU,EAAAA,cAAoBb,EAAYI,IAAK,KAAM,mEAChP,CAMA,SAASQ,EAAqBG,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UAJA,SAAoBhB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOU,EAAYN,EAAAA,cAAoBM,EAAWpB,EAAOc,EAAAA,cAAoBf,EAAmBC,IAAUD,EAAkBC,EAC9H,C","sources":["webpack://example/./src/pages/coreconcepts/meters/overview.mdx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {PageDescription, InlineNotification} = _components;\n  if (!InlineNotification) _missingMdxReference(\"InlineNotification\", true);\n  if (!PageDescription) _missingMdxReference(\"PageDescription\", true);\n  return React.createElement(React.Fragment, null, React.createElement(PageDescription, null, React.createElement(_components.p, null, \"Meters for configuration-managed (CM) assets operate in a different way to that of standard (non-cm) assets.\", React.createElement(_components.br), \"\\n\", \"This section discusses this important distinction in depth as it is an often misunderstood area.\")), \"\\n\", React.createElement(_components.h2, null, \"Overview\"), \"\\n\", React.createElement(InlineNotification, {\n    kind: \"warning\"\n  }, React.createElement(_components.p, null, \"This topic is specific to Meters with a maximo meter type of CONTINUOUS.\", React.createElement(_components.br), \"\\n\", \"GAUGE and CHARACTERISTIC meters are treated and behave in the same way as standard Maximo Manage.\")), \"\\n\", React.createElement(_components.p, null, \"One of the key features of Maximo Asset Configuration Manager (ACM) is its ability to dynamically calculate the life (meter totals) of an asset at any point over the course of its life.\"), \"\\n\", React.createElement(_components.p, null, \"Meter values can be derived and viewed for any point in time in the history of the assets life cycle. This “active life cycle accounting” provides improved compliance for regulated industries, while helping to increase reliability and accountability.\"), \"\\n\", React.createElement(_components.p, null, \"The life of an asset, at a specific “As of Date” is calculated dynamically (at run time) using a dedicated algorithm which considers:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The configuration history of an asset. Ie where it has been installed and between what dates.\"), \"\\n\", React.createElement(_components.li, null, \"The meter readings entered against the asset directly and also any at a higher level within the asset hierarchy (for the dates in which the asset was installed).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This means that meter readings can be entered against any asset within a complex configuration managed structure and these readings will be automatically “inherited” by all sub-assembly (child) assets, depending on the configuration history.\"), \"\\n\", React.createElement(_components.p, null, \"The use of this dynamic meter calculation algorithm:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Negates the need for an Asset “Rolldown” to child assets and duplication of meter readings.\"), \"\\n\", React.createElement(_components.li, null, \"Means Any historical changes to the configuration of an asset or the creation, update or deletion of meter reading records will be immediately reflected on the asset and considered by associated maintenance plans when determining when they are next due.\"), \"\\n\"), \"\\n\", React.createElement(InlineNotification, {\n    kind: \"error\"\n  }, React.createElement(_components.p, null, \"It is important to ensure that the ASSETMETER.ROLLDOWNSOURCE is set to NONE for CM Assets.\", React.createElement(_components.br), \"\\n\", \"This should happen automatically for CM assets created through the application.\", React.createElement(_components.br), \"\\n\", \"Special care should be taken when loading datathrough the Maximo Integration Framework (MIF) that this is not value is not overridden.\")), \"\\n\", React.createElement(InlineNotification, {\n    kind: \"error\"\n  }, React.createElement(_components.p, null, \"Dute to the dynamic life algorithm, meter readings should not be loaded against parent and child assets, either through the UI  or and integration.\", React.createElement(_components.br), \"\\n\", \"This will result in an incorrect calculation for child assets.\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","br","h2","ul","li","_provideComponents","components","PageDescription","InlineNotification","_missingMdxReference","React","kind","id","component","Error","wrapper","MDXLayout"],"sourceRoot":""}